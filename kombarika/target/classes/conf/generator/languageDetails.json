{
    "languages" : {
        "csharp" : {
            "name" : "dotnet",
            "importSyntax":"using",
            "packageSyntax":"namespace",
            "openBracket":"{",
            "closeBracket":"}",
            "classSyntax":"public class",
            "fieldSyntax":"public Type field { get; set; }",
            "endOfInstruction":";",
            "annotationSyntax":"[?]",
            "constructorSyntax": "public ?(){}",
            "methodSyntax": "public #type# #name#(#arg#){\n #body#\n}",
            "encapsulation":"",
            "extension":"cs",
            "frameworks" : {
                "dotnet" : {
                    "template" : "Template.code",
                    "repository": "Template.code",
                    "listSyntax" : "IEnumerable<?>",
                    "isOneRepository":"true",
                    "imports": {
                        "controller":[
                            "System.Diagnostics",
                            "Microsoft.AspNetCore.Mvc",
                            "packageName.classNameContext",
                            "entity",
                            ""
                        ],
                        "entity":[
                            "System.ComponentModel.DataAnnotations",
                            "System.ComponentModel.DataAnnotations.Schema"
                        ],
                        "repository":[
                            "packageName",
                            "Microsoft.EntityFrameworkCore"
                        ]
                    },
                    "annotationProperty" : {
                        "table":"Table(\"?\")",
                        "autoIncrement":"",
                        "column":"Column(\"?\")",
                        "entity": "",
                        "controller": "ApiController",
                        "constraints":{
                            "primaryKey":"Key",
                            "foreignKey":{
                                "annotation":"ForeignKey(\"?\")",
                                "manyToOne":"",
                                "manyToMany":"",
                                "oneToMany":"",
                                "oneToOne":""
                            }
                        }
                    },
                    "crudMethod" : {
                        "findAll": "return Ok(_context.?#between#.ToList());",
                        "findById":"",
                        "delete": "_context.?.Remove(#object#);\n_context.SaveChanges();\t\nreturn Ok();",
                        "update": "var temp = #object#;\n_context.update(temp)\n_context.SaveChanges();\nreturn Ok();",
                        "save": "_context.?.Add(#object#);\n_context.SaveChanges();\nreturn Ok();"
                    },
                    "controllerProperty" : {
                        "path": "Route(\"api/[[?]]\")",
                        "get": "HttpGet",
                        "post": "HttpPost",
                        "put": "HttpPut",
                        "delete": "HttpDelete",
                        "name":"Controller",
                        "includedTerms":".Include(l => l.#values#)",
                        "pathSyntax":"[?]",
                        "classSyntax": "?Controller : Controller",
                        "returnType": "ActionResult<?>",
                        "returnTypeDelete": "void",
                        "field": "private readonly #name#DbContext _context;\n\tprivate readonly ILogger<?Controller> _logger;",
                        "annotationField": "",
                        "annotationMethodParameter":"",
                        "annotationArgumentParameterFormData":"FromBody",
                        "annotationArgumentParameterLink":"",
                        "constructor": "\tpublic #name#Controller(?DbContext context) { _context = context; }",
                        "findAllAsync": "async Task<?>"
                    },
                    "repositoryProperty" : {
                        "name":"DbContext",
                        "classSyntax": "public class ?DbContext : DbContext",
                        "fieldSyntax": "\tpublic DbSet<#Field#> #Field# { get; set; }",
                        "constructor":"\tpublic #name#DbContext(){}\n\tpublic #name#DbContext(DbContextOptions<#name#DbContext> options): base(options){}"
                    }
                }
            }
        },
        "java" : {
            "name" : "java",
            "importSyntax":"import",
            "packageSyntax":"package",
            "classSyntax":"public class",
            "fieldSyntax":"Type field;",
            "openBracket":"{",
            "closeBracket":"}",
            "endOfInstruction":";",
            "annotationSyntax":"@?",
            "constructorSyntax": "public ?(){}",
            "methodSyntax": "public #type# #name#(#arg#){\n #body#\n}",
            "encapsulation":"\tpublic #type# get#Field#(){\n\t\treturn this.#field#;\n\t}\n\tpublic void set#Field#(#type# #field#){\n\t\tthis.#field# = #field#;\n\t}\n",
            "extension":"java",
            "frameworks": {
                "spring-boot" : {
                    "template" : "Template.code",
                    "repository": "Template.code",
                    "listSyntax" : "Iterable<?>",
                    "isOneRepository":"false",
                    "imports" : {
                        "controller":[
                            "packageName.classNameRepository",
                            "entity.className",
                            "org.springframework.http.*",
                            "org.springframework.beans.factory.annotation.Autowired",
                            "org.springframework.web.bind.annotation.*"
                        ],
                        "entity":[
                            "jakarta.persistence.*"
                        ],
                        "repository":[
                            "packageName.className",
                            "org.springframework.data.repository.CrudRepository"
                        ]
                    },
                    "annotationProperty" : {
                        "table": "Table(name = \"?\")",
                        "autoIncrement":"GeneratedValue(strategy=GenerationType.IDENTITY)",
                        "column": "Column(name = \"?\")",
                        "entity": "Entity",
                        "controller": "RestController\n@CrossOrigin(\"*\")",
                        "constraints": {
                            "primaryKey": "Id",
                            "foreignKey": {
                                "annotation":"JoinColumn(name = \"?\")",
                                "manyToOne":"ManyToOne",
                                "manyToMany":"",
                                "oneToMany":"",
                                "oneToOne":""
                            }
                        }
                    },
                    "crudMethod" : {
                        "findAll": "return ResponseEntity.ok(repository.findAll());",
                        "findById":"return ResponseEntity.ok(repository.findById(#Id#));",
                        "delete": "repository.delete(#object#);",
                        "update": "return ResponseEntity.ok(repository.save(#object#));",
                        "save": "return ResponseEntity.ok(repository.save(#object#));"
                    },
                    "controllerProperty" : {
                        "path": "RequestMapping(path = \"?\")",
                        "get": "GetMapping()",
                        "post": "PostMapping()",
                        "put": "PutMapping()", 
                        "name":"Controller",
                        "includedTerms":"",
                        "pathSyntax":"?",
                        "delete": "DeleteMapping()",
                        "classSyntax": "?Controller",
                        "field": "private ?Repository repository;",
                        "returnType": "ResponseEntity<?>",
                        "returnTypeDelete": "void",
                        "annotationField": "Autowired",
                        "annotationMethodParameter":"",
                        "annotationArgumentParameterFormData":"RequestBody",
                        "annotationArgumentParameterLink":"PathVariable",
                        "constructor": "",
                        "findAllAsync": "?"
                    },
                    "repositoryProperty" : {
                        "name":"Repository",
                        "classSyntax": "public interface ?Repository extends CrudRepository<?, #type#>",
                        "fieldSyntax": "",
                        "constructor":""
                    }

                },
                "karana" : {
                    "template" : "Template.code",
                    "repository": "", 
                    "listSyntax" : "List<?>",
                    "isOneRepository":"false",
                    "imports" : {
                        "controller":[
                            "entity.className",
                            "com.karana.etu2060.framework.annotation.*",
                            "com.karana.etu2060.framework.annotation.property.*",
                            "com.dao.database.GenericDao"
                        ],
                        "entity":[
                            "com.dao.annotation.*",
                            "com.dao.annotation.conf.ForeignType"
                        ],
                        "repository":[

                        ]
                    },
                    "annotationProperty" : {
                        "table": "Table(name = \"?\")",
                        "autoIncrement":"GeneratedValue(autoIncrement = true)",
                        "column": "Column(name = \"?\")",
                        "entity": "",
                        "controller": "",
                        "constraints": {
                            "primaryKey": "PrimaryKey",
                            "foreignKey": {
                                "annotation":"ForeignKey(mappedBy = \"?\", foreignType = ForeignType.OneToMany)",
                                "manyToOne":"",
                                "manyToMany":"",
                                "oneToMany":"",
                                "oneToOne":""
                            }
                        }
                    },
                    "crudMethod" : {
                        "findAll": "try{\n\treturn GenericDao.findAll(null, entity);\n}catch(Exception e){\n\treturn e.getMessage();\n}",
                        "findById":"try{\n\treturn GenericDao.findById(null, #Id#);\n}catch(Exception e){\n\treturn e.getMessage();\n}",
                        "delete": "try{\n\tGenericDao.delete(null, #object#);\n\treturn \"deleted successfully\";\n}catch(Exception e){\n\treturn e.getMessage();\n}",
                        "update": "try{\n\tGenericDao.update(null, #object#);\n\treturn \"updated successfully\";\n}catch(Exception e){\n\treturn e.getMessage();\n}",
                        "save": "try{\n\tGenericDao.save(null, #object#);\n\treturn \"saved successfully\";\n}catch(Exception e){\n\treturn e.getMessage();\n}"
                    },
                    "controllerProperty" : {
                        "path": "RequestMapping(path = \"/?\")\n@Cors(allowedOrigin = \"*\")",
                        "get": "Url(method = HttpMethod.GET)\n@Json",
                        "post": "Url(method = HttpMethod.POST)\n@Json",
                        "put": "Url(method = HttpMethod.PUT)\n@Json",
                        "delete": "Url(method = HttpMethod.DELETE)\n@Json",
                        "classSyntax": "?Model",
                        "name":"Model",
                        "includedTerms":"",
                        "field": "private ? entity = new ?();",
                        "returnType": "Object",
                        "returnTypeDelete": "Object",
                        "pathSyntax":"?",
                        "annotationField": "",
                        "annotationMethodParameter":"",
                        "annotationArgumentParameterFormData":"RequestBody",
                        "annotationArgumentParameterLink":"RequestParam",
                        "constructor":"",
                        "findAllAsync": "?"
                    },
                    "repositoryProperty" : {
                        "name":"",
                        "classSyntax": "",
                        "fieldSyntax":"",
                        "constructor":""

                    }
                },
                "merana" : {
                    "template" : "Template.code",
                    "repository": "",
                    "listSyntax" : "List<?>",
                    "isOneRepository":"false",
                    "imports" : {
                        "controller":[
                            "entity.className",
                            "ambovombe.merana.utils.mapping.*",
                            "ambovombe.merana.utils.mapping.method.HttpMethod.*",
                            "com.dao.database.GenericDao"
                        ],
                        "entity":[
                            "com.dao.annotation.*",
                            "com.dao.annotation.conf.ForeignType"
                        ],
                        "repository":[

                        ]
                    },
                    "annotationProperty" : {
                        "table": "Table(name = \"?\")",
                        "autoIncrement":"GeneratedValue(autoIncrement = true)",
                        "column": "Column(name = \"?\")",
                        "entity": "",
                        "controller": "",
                        "constraints": {
                            "primaryKey": "PrimaryKey",
                            "foreignKey": {
                                "annotation":"ForeignKey(mappedBy = \"?\", foreignType = ForeignType.OneToMany)",
                                "manyToOne":"",
                                "manyToMany":"",
                                "oneToMany":"",
                                "oneToOne":""
                            }
                        }
                    },
                    "crudMethod" : {
                        "findAll": "try{\n\treturn GenericDao.findAll(null, entity);\n}catch(Exception e){\n\treturn e.getMessage();\n}",
                        "findById":"try{\n\treturn GenericDao.findById(null, #Id#);\n}catch(Exception e){\n\treturn e.getMessage();\n}",
                        "delete": "try{\n\tGenericDao.delete(null, #object#);\n\treturn \"deleted successfully\";\n}catch(Exception e){\n\treturn e.getMessage();\n}",
                        "update": "try{\n\tGenericDao.update(null, #object#);\n\treturn \"updated successfully\";\n}catch(Exception e){\n\treturn e.getMessage();\n}",
                        "save": "try{\n\tGenericDao.save(null, #object#);\n\treturn \"saved successfully\";\n}catch(Exception e){\n\treturn e.getMessage();\n}"
                    },

                    "controllerProperty" : {
                        "path": "RequestUrl(\"/?\")",
                        "get": "Url(method = GET)",
                        "post": "Url(method = POST)",
                        "put": "Url(method = PUT)",
                        "delete": "Url(method = DELETE)",
                        "name":"Controller",
                        "includedTerms":"",
                        "classSyntax": "?Controller",
                        "field": "private ? entity = new ?();",
                        "returnType": "Object",
                        "returnTypeDelete": "Object",
                        "pathSyntax":"?",
                        "annotationField": "",
                        "annotationMethodParameter":"",
                        "annotationArgumentParameterFormData":"RequestBody",
                        "annotationArgumentParameterLink":"",
                        "constructor":"",
                        "findAllAsync": "?"
                    },
                    "repositoryProperty" : {
                        "name":"",
                        "classSyntax": "",
                        "fieldSyntax":"",
                        "constructor":""

                    }
                }
            }
        }
    }
}

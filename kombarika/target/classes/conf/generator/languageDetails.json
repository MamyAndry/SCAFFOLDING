{
    "languages" : {
        "dotnet" : {
            "name" : "dotnet",
            "importSyntax":"using",
            "packageSyntax":"namespace",
            "classSyntax":"public class",
            "listSyntax" : "List<?>",
            "endOfInstruction":";",
            "annotationSyntax":"[?]",
            "constructorSyntax": "public ?(){}",
            "methodSyntax": "public #type# #name#(#arg#){\n #body#\n}",
            "encapsulation":"\t[Column(name = '?')]\n\tpublic #type# #Field#{\n\t\tget{\n\t\t\treturn #field;\n\t\t}\n\t\tset{\n\t\t\t#field = value;\n\t\t}\n\t}\n",
            "extension":"cs",
            "frameworks" : {
                "dotnet" : {
                    "template" : "Template.code",
                    "repository": "",
                    "imports": {
                        "controller":[
                            "System.Diagnostics",
                            "Microsoft.AspNetCore.Mvc"
                        ],
                        "entity":[
                            "System.ComponentModel.DataAnnotations",
                            "System.ComponentModel.DataAnnotations.Schema"
                        ],
                        "repository":[
                        ]
                    },
                    "annotationProperty" : {
                        "table":"Table(name = '?')",
                        "column":"Column(name = '?')",
                        "entity": "",
                        "controller": "ApiController",
                        "constraints":{
                            "primaryKey":"Id",
                            "foreignKey":[""]
                        }
                    },
                    "crudMethod" : {
                        "findAll": "repository.findAll()",
                        "findById":"repository.findById(#Id#)",
                        "delete": "repository.delete(#Id#)",
                        "update": "repository.delete(#object#)",
                        "save": "repository.save(#object#)"
                    },
                    "controllerProperty" : {
                        "path": "Route('[?]')",
                        "get": "HttpGet(Name = '?')",
                        "post": "HttpPost(Name = '?')",
                        "put": "HttpPut(Name = '?')",
                        "delete": "HttpDelete(Name = '?')",
                        "returnType": "IEnumerable<?>",
                        "field": "private readonly Ilogger<?Controller> _logger;",
                        "annotationField": "",
                        "annotationArgumentParameterFormData":"",
                        "annotationArgumentParameterLink":""
                    },
                    "repositoryProperty" : {
                        "classSyntax": ""
                    }
                }
            }
        },
        "java" : {
            "name" : "java",
            "importSyntax":"import",
            "packageSyntax":"package",
            "classSyntax":"public class",
            "endOfInstruction":";",
            "annotationSyntax":"@?",
            "listSyntax" : "List<?>",
            "constructorSyntax": "public ?(){}",
            "methodSyntax": "public #type# #name#(#arg#){\n #body#\n}",
            "encapsulation":"\tpublic #type# get#Field#(){\n\t\treturn this.#field#;\n\t}\n\tpublic void set#Field#(#type# #field#){\n\t\tthis.#field# = #field#;\n\t}\n",
            "extension":"java",
            "frameworks": {
                "spring-boot" : {
                    "template" : "Template.code",
                    "repository": "Template.code",
                    "imports" : {
                        "controller":[
                            "org.springframework.beans.factory.annotation.Autowired",
                            "org.springframework.web.bind.annotation.*"
                        ],
                        "entity":[
                            "jakarta.persistence.Column",
                            "jakarta.persistence.Entity",
                            "jakarta.persistence.Id",
                            "jakarta.persistence.Table"
                        ],
                        "repository":[
                            "packageName.className",
                            "org.springframework.data.repository.CrudRepository",
                            "org.springframework.data.jpa.repository.Query"
                        ]
                    },
                    "annotationProperty" : {
                        "table": "Table(name = '?')",
                        "column": "Column(name = '?')",
                        "entity": "Entity",
                        "controller": "RestController",
                        "constraints": {
                            "primaryKey": "Id",
                            "foreignKey": [
                                ""
                            ]
                        }
                    },
                    "crudMethod" : {
                        "findAll": "repository.findAll()",
                        "findById":"repository.findById(#Id#)",
                        "delete": "repository.delete(#Id#)",
                        "update": "repository.delete(#object#)",
                        "save": "repository.save(#object#)"
                    },
                    "controllerProperty" : {
                        "path": "RequestMapping(path = '?')",
                        "get": "GetMapping()",
                        "post": "PostMapping()",
                        "put": "PutMapping()",
                        "delete": "DeleteMapping()",
                        "field": "private ?Repository repository;",
                        "returnType": "ResponseEntity<?>",
                        "annotationField": "Autowired",
                        "annotationMethodParameter":"",
                        "annotationArgumentParameterFormData":"RequestParam",
                        "annotationArgumentParameterLink":"PathVariable"
                    },
                    "repositoryProperty" : {
                        "classSyntax": "public interface ?Repository extends CrudRepository<?, String>"
                    }

                }
            }
        }
    }
}
